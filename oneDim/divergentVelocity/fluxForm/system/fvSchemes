/*---------------------------------------------------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  1.4                                   |
|   \\  /    A nd           | Web:      http://www.openfoam.org               |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/

FoamFile
{
    version         2.0;
    format          ascii;

    root            "";
    case            "";
    instance        "";
    local           "";

    class           dictionary;
    object          fvSchemes;
}

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

ddtSchemes
{
    default Euler;
}

gradSchemes
{
    default         none;
    grad(magSqr(stable.u))     Gauss linear;
    grad(magSqr(buoyant.u))    Gauss linear;
    linearUpwind               Gauss linear;
    grad(stable.h_0)           Gauss linear;
    grad(buoyant.h_0)          Gauss linear;
    grad(magSqr(stable.u_0))   Gauss linear;
    grad(magSqr(buoyant.u_0))  Gauss linear;
}

divSchemes
{
    default         none;
    //Needed for governing equations.
    div(stable.volFlux,stable.h_0)     Gauss upwind;
    div(buoyant.volFlux,buoyant.h_0)   Gauss upwind;
    
    div(stable.flux_0,stable.u_0)        Gauss upwind;//Gauss APVM stable.Uf;//
    div(buoyant.flux_0,buoyant.u_0)      Gauss upwind;//Gauss APVM buoyant.Uf;//
    
    div(stable.volFlux_0,volIntegrate(stable.flux_0))       Gauss upwind;
    div(buoyant.volFlux_0,volIntegrate(buoyant.flux_0))       Gauss upwind;
}

laplacianSchemes
{
    default         none;
}

interpolationSchemes
{
    default            none;
    //Needed for governing equations.
    linear                        linear;
    interpolate(h)                linear;
    interpolate(stable.h)         linear;//upwind stable.flux_0;
    interpolate(buoyant.h)        linear;//upwind buoyant.flux_0;
    interpolate(stable.u)         linear;
    interpolate(buoyant.u)        linear;
    flux(div((stable.flux*stable.Uf)))        upwind stable.flux;
    flux(div((buoyant.flux*buoyant.Uf)))      upwind buoyant.flux;
    interpolate(convection(stable.flux_0,stable.u_0))       linear;//upwind stable.flux;
    interpolate(convection(buoyant.flux_0,buoyant.u_0))     linear;//upwind buoyant.flux;
    interpolate(volIntegrate((snGrad(stable.u_0)*magSf)))   linear;
    interpolate(volIntegrate((snGrad(buoyant.u_0)*magSf)))  linear;
    interpolate(volIntegrate((snGrad(div((stable.flux*stable.Uf)))*magSf)))     linear;
    interpolate(volIntegrate((snGrad(div((buoyant.flux*buoyant.Uf)))*magSf)))   linear;
    
    interpolate(convection(stable.volFlux_0,volIntegrate(stable.flux_0)))       linear;
    interpolate(convection(buoyant.volFlux_0,volIntegrate(buoyant.flux_0)))       linear;
    flux((convection(stable.volFlux,stable.h_0)*stable.u))                      linear;
    flux((convection(buoyant.volFlux,buoyant.h_0)*buoyant.u))                      linear;
    interpolate(convection(stable.volFlux,stable.h_0))              linear;
    interpolate(convection(buoyant.volFlux,buoyant.h_0))              linear;
}

snGradSchemes
{
    default         uncorrected;
    snGrad(h)       uncorrected;
}

fluxRequired
{
    default         no;
    h;
}


// ************************************************************************* //
