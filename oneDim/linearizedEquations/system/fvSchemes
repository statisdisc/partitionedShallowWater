/*---------------------------------------------------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  1.4                                   |
|   \\  /    A nd           | Web:      http://www.openfoam.org               |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/

FoamFile
{
    version         2.0;
    format          ascii;

    root            "";
    case            "";
    instance        "";
    local           "";

    class           dictionary;
    object          fvSchemes;
}

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

ddtSchemes
{
    default Euler;
}

gradSchemes
{
    default         linear;
    curl((streamFunction*(0,0,1))) Gauss linear;
    linearUpwind Gauss linear;
}

divSchemes
{
    default         none;
    div(U,u)        Gauss linear;
    div(phi,U)      Gauss linear;
    div(VOLFLUX.stable,sigmah.stable)     Gauss upwind;
    div(VOLFLUX.buoyant,sigmah.buoyant)   Gauss upwind;
    
    div(volFlux.stable,SIGMAH.stable)     Gauss linear;
    div(volFlux.buoyant,SIGMAH.buoyant)   Gauss linear;
}

laplacianSchemes
{
    default         Gauss linear uncorrected;
    h                         Gauss linear uncorrected;
    laplacian(streamFunction) Gauss linear uncorrected;
    laplacian(h)              Gauss linear uncorrected;
}

interpolationSchemes
{
    default            none;
    interpolate(U)     linear;
    flux((twoOmega^U)) linear;
    flux(convection(phi,U)) linear;
    
    sigma                         linear;
    sigmah                        linear;
    interpolate(h)                linear;
    interpolate(sigmah.stable)    linear;
    interpolate(sigmah.buoyant)   linear;
    interpolate(u.stable)         linear;
    interpolate(u.buoyant)        linear;
    interpolate(U.stable)         linear;
    interpolate(U.buoyant)        linear;
    interpolate(grad(Uf.stable))  upwind VOLFLUX.stable;
    interpolate(grad(Uf.buoyant)) upwind VOLFLUX.buoyant;
}

snGradSchemes
{
    default         uncorrected;
    snGrad(h)       uncorrected;
    snGrad(p)       uncorrected;
}

fluxRequired
{
    default         no;
    h;
}


// ************************************************************************* //
