/*---------------------------------------------------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  1.4                                   |
|   \\  /    A nd           | Web:      http://www.openfoam.org               |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/

FoamFile
{
    version         2.0;
    format          ascii;

    root            "";
    case            "";
    instance        "";
    local           "";

    class           dictionary;
    object          fvSchemes;
}

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

ddtSchemes
{
    default Euler;
}

gradSchemes
{
    default         none;
    curl((streamFunction*(0,0,1))) Gauss linear;
    //linearUpwind Gauss linear;
}

divSchemes
{
    default         none;
    //Needed for initial setup.
    div(phi,U)      Gauss linear;
    
    //Needed for governing equations.
    div(stable.flux,stable.u)        Gauss upwind;
    div(buoyant.flux,buoyant.u)      Gauss upwind;
    div(stable.volFlux,stable.h)     Gauss upwind;
    div(buoyant.volFlux,buoyant.h)   Gauss upwind;
}

laplacianSchemes
{
    default         none;
    laplacian(streamFunction) Gauss linear uncorrected;
    laplacian(h)              Gauss linear uncorrected;
    laplacian(stable.sigma)   Gauss linear uncorrected;
    laplacian(buoyant.sigma)   Gauss linear uncorrected;
}

interpolationSchemes
{
    default            none;
    //Needed for initial setup.
    interpolate(h)                linear;
    interpolate(U)                linear;
    flux((twoOmega^U))            linear;
    flux(convection(phi,U))       linear;
    
    //Needed for governing equations.
    interpolate(stable.h)         linear; //upwind stable.flux;
    interpolate(buoyant.h)        linear; //upwind buoyant.flux;
    interpolate(stable.u)         linear;
    interpolate(buoyant.u)        linear;
    flux(convection(stable.flux,stable.u))        linear;
    flux(convection(buoyant.flux,buoyant.u))      linear;
    
    interpolate(((K*stable.hOld)*laplacian(stable.sigma)))  linear;
    interpolate(((K*buoyant.hOld)*laplacian(buoyant.sigma)))  linear;
}

snGradSchemes
{
    default         uncorrected;
    snGrad(h)       uncorrected;
    snGrad(p)       uncorrected;
}

fluxRequired
{
    default         no;
    h;
}


// ************************************************************************* //
